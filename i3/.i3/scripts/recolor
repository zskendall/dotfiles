#!/bin/bash

argv="$#"
THEME=$1
shift
IMAGES=("$@")

# normal font color
normal=$(tput sgr0)

warn() {
  yellow=$(tput setaf 3)
  printf "%s\n" "${yellow}$@${normal}"
}

error() {
  red=$(tput setaf 1)
  printf "%s\n" "${red}$@${normal}"
}

# @arg1 the config without the theme
# @arg2 the available themes for the config
no_theme_error() {
  error "" "No $1 configuration for theme $THEME." \
    "  Available themes are [${2//$'\n'/ }]" \
    "Leaving $1 configuration as-is."
}

refresh_display() {
  if (( ${#IMAGES[@]} < 1 )); then
    warn "No images for theme $THEME. Leaving background as-is."
  else
    local display="feh --bg-scale "
    [[ $THEME == "borealis" ]] && display="feh --bg-fill "
    for i in "${IMAGES[@]}"; do
      display+="'$i' "
    done
    eval $display
  fi
}

# @arg1 the delimiter
# @arg2 index to extract
extract() {
  awk -F"$1" "{print \$$2}"
}

line_no() {
  extract ':' '1'
}

theme_polybar() {
  local current=`egrep -o "^;?include-file = ~/.*/colors/([a-z]+).ini" \
      ~/.config/polybar/config | cut -d'/' -f 5 | extract '.' '1'`
  local updated=`[[ -r ~/.config/polybar/colors/$THEME.ini ]] \
    && echo "$THEME" || echo "default"`
  if [[ "$updated" == *"default"* ]]; then
    local available=`ls ~/.config/polybar/colors/*.ini | cut -d'/' -f 7 \
      | extract '.' '1'`
    warn "" "Unknown polybar theme $THEME." \
      "  Available themes are: [${available//$'\n'/ }]" \
      "Using default polybar colors."
    # comment out the color theme file include if needed
    if [[ -z $(egrep -o "^;include-file =.*${current}.ini" \
      ~/.config/polybar/config) ]]; then
      sed -ri "/${current}.ini$/s/(.*)/;\1/g" ~/.config/polybar/config
    fi
  else
    # there's a custom theme, so uncomment the file include line
    sed -ri "/${current}.ini$/s/;//g" ~/.config/polybar/config
  fi
  sed -ri "/${current}.ini$/s/${current}/${THEME}/g" ~/.config/polybar/config

  # read and parse focus_foreground for the icon styling
  local focus_from_file=`grep "^focus" ~/.config/polybar/colors/$THEME.ini \
    | extract '#' '2'`
  local focus=`[ ! -z "$focus_from_file" ] && echo "$focus_from_file" \
    || awk "/\[default\]/,/FONTS/" ~/.config/polybar/config \
    | egrep -m 1 "^focus" | extract '#' '2'`
  echo $focus
  sed -ri "s/F#[a-f0-9]{6}/F#$focus/g" ~/.config/polybar/config
  sed -ri "s/F#[a-f0-9]{6}/F#$focus/g" ~/.config/polybar/launch.sh
  sed -ri "s/F#[a-f0-9]{6}/F#$focus/g" ~/.config/polybar/modules/datetime.ini
  sed -ri "s/F#[a-f0-9]{6}/F#$focus/g" ~/.config/polybar/modules/network.ini
  sed -ri "s/F#[a-f0-9]{6}/F#$focus/g" ~/.config/polybar/modules/volume.ini

  # restart polybar to pick up focus changes in module files
  polybar-msg cmd restart
}

theme_i3() {
  if [[ ! $(grep "^set \$$THEME" ~/.i3/config) ]]; then
    local available=`awk "/# themed/,/# class/" ~/.i3/config | \
      egrep "set .[a-z]+.*" | extract ' ' '2' | sed 's/\$//'`
    no_theme_error "i3" "$available"
    return
  fi
  local current=`egrep -o "^client\.focused .*\$" ~/.i3/config \
    | extract ' ' '2' | sed 's/\$//'`
  sed -i "/^client/s/${current}/\$${THEME}/g" ~/.i3/config
  i3-msg reload
}

theme_tmux() {
  if [[ ! $(grep "^${THEME}_" ~/.tmux.conf) ]]; then
    local available=`awk "/# Themed colors/,/\}\}\}/" ~/.tmux.conf | \
      grep ".*_accent" | extract '_' '1'`
    no_theme_error "tmux" "$available"
    return
  fi
  local line=`grep -m 1 "^accent=\$.*_" ~/.tmux.conf`
  local re='.*\$([a-z]+)_.*'
  [[ $line =~ $re ]]
  local current=${BASH_REMATCH[1]}

  local s=`grep -n -m 1 "}}}" ~/.tmux.conf | line_no`
  local e=`grep -n -m 1 "Status bar {{{" ~/.tmux.conf | line_no`
  sed -i "${s},${e}s/\$${current}/\$${THEME}/" ~/dotfiles/tmux/.tmux.conf
}

theme_rofi() {
  if [ ! -r "$HOME/.config/rofi/colorschemes/$THEME.rasi" ]; then
    local available=`grep -r "@import \"general.rasi\"" ~/.config/rofi | \
      extract ':' '1' | extract '.' '2' | extract '/' '4'`
    no_theme_error "rofi" "$available"
    return
  fi
  local line=`egrep -o "^@import .*\.rasi" ~/.config/rofi/launcher.rasi`
  local re='.*/([a-z]+).rasi'
  [[ $line =~ $re ]]
  local current=${BASH_REMATCH[1]}
  for f in $(grep -r $current ~/.config/rofi | extract ':' '1'); do
    sed -i "/^@import/s/${current}/${THEME}/g" $f
  done
}

theme_dunst() {
  # read the [urgency_normal] section and parse the background and foreground
  norm=`awk "/\[urgency_normal\]/,/\[urgency_critical/" ~/.config/dunst/dunstrc`
  local line=`grep "$THEME:" <<< "$norm"`
  local updated=`[[ ! -z "$line" ]] && echo $THEME || echo "default"`
  local line=`([[ ! -z $line ]] && echo $line || \
    echo $(grep "default" <<< "$norm"))`
  local norm_bg=$(echo $line | extract '#' '3' | sed -e 's/[[:space:]]*$//')
  local norm_fg=$(echo $line | extract '#' '4')
  local nbeg=`grep -n "\[urgency_normal\]" ~/.config/dunst/dunstrc | line_no`
  local nend=`grep -n "\[urgency_critical\]" ~/.config/dunst/dunstrc | line_no`

  sed -ri "${nbeg},${nend}s/(^.*background = \"#)[a-f0-9]{6}/\1$norm_bg/" ~/.config/dunst/dunstrc
  sed -ri "${nbeg},${nend}s/(^.*foreground = \"#)[a-f0-9]{6}/\1$norm_fg/" ~/.config/dunst/dunstrc

  # read and parse the frame color
  local frame=`awk "/color of the frame/,/color for the separator/" \
    ~/.config/dunst/dunstrc`
  local line=`grep "$THEME:" <<< "$frame"`
  local frame=`([[ ! -z $line ]] && echo $line || \
    echo $(grep "default" <<< "$frame")) | extract '#' '3'`
  local fbeg=`grep -n "color of the frame" ~/.config/dunst/dunstrc | line_no`
  local fend=`grep -n "color for the separator" ~/.config/dunst/dunstrc |
    line_no`
  sed -ri "${fbeg},${fend}s/(^.*frame_color = \"#)[a-f0-9]{6}/\1$frame/" ~/.config/dunst/dunstrc

  # attempt to kill dunst to reload the config (shouldn't be allowed, since
  # daemon started from DBUS)
  pkill dunst
  if [[ "$updated" == *"default"* ]]; then
    warn "Reset dunst theme to default"
  fi
}

theme_ncmpcpp() {
  if [ ! -r "$HOME/.ncmpcpp/$THEME.ini" ]; then
    local available=`ls ~/.ncmpcpp/*.ini | extract '/' '5' | extract '.' '1'`
    no_theme_error "ncmpcpp" "$available"
    return
  fi
  local music_dir=`grep music_directory ~/.config/mpd/mpd.conf | extract '  ' '2'`
  sed "s~%music_dir%~$music_dir~" ~/.ncmpcpp/template > ~/.ncmpcpp/config
  IFS=$'\n'
  for line in $(cat ~/.ncmpcpp/$THEME.ini); do
    local param=`echo $line | extract '=' '1' | sed "s/ *$//g"`
    local value=`echo $line | extract '=' '2' | sed "s/^ *//g"`
    sed -i "s/%$param%/$value/g" ~/.ncmpcpp/config
  done
}

theme_vim() {
  if [[ ! $(grep "$THEME:" ~/.vimrc) ]]; then
    local available=`awk "/Split bar/,/}}}/" ~/.vimrc | \
      egrep "^\".*[a-z]+:.*[0-9]+" | extract ':' '1' | sed 's/\" //'`
    no_theme_error "vim" "$available"
    return
  fi
  local themed=`grep "$THEME:" ~/.vimrc | extract ': ' '2'`
  local bg=`echo $themed | extract ',' '1'`
  local fg=`[[ $(grep ',' <<< "$themed") ]] && \
    echo $(echo $themed | extract ',' '2') || echo "15"`
  sed -ri --follow-symlinks "/VertSplit/s/(ctermfg=)[0-9]+/\1$bg/" ~/.vimrc
  sed -ri --follow-symlinks "/OverLength/s/(ctermbg=)[0-9]+/\1$bg/" ~/.vimrc
  sed -ri --follow-symlinks "/OverLength/s/(ctermfg=)[0-9]+/\1$fg/" ~/.vimrc
}

theme_others() {
  if [ -z $THEME ]; then
    bold=$(tput bold)
    error "" "${bold}No theme provided; exiting.${normal}"
    exit 1
  fi
  theme_i3
  theme_tmux
  theme_rofi
  theme_ncmpcpp
  theme_vim
  # TODO(zskendall): theme xfce4-terminal for light bg (paracosm)
}

if (( `ps -aux | grep polybar | wc -l` > 1 )) ; then
  notify-send -a recolor "changing theme to $THEME"
fi

if (( ${#IMAGES[@]} != `xrandr | egrep "[^dis]connected" | wc -l` )); then
  case $THEME in
    borealis)
      IMAGES=(~/dotfiles/images/background_main.jpg \
        ~/dotfiles/images/aurora_secondary.jpg)
      ;;
    nikhita)
      IMAGES=(~/dotfiles/images/background_secondary.jpg \
        ~/dotfiles/images/nikhita_secondary.jpg)
      ;;
    astral)
      IMAGES=(~/dotfiles/images/astral_main.jpg ~/dotfiles/images/DSC_4419.jpg)
      ;;
    autumnal)
      IMAGES=(~/dotfiles/images/autumnal_main.jpg \
        ~/dotfiles/images/autumnal_secondary.jpg)
      ;;
  esac
fi
refresh_display

theme_dunst
theme_polybar
theme_others
if (( `ps -aux | grep polybar | wc -l` > 1 )) ; then
  notify-send -a recolor "udpated theme to $THEME"
fi
